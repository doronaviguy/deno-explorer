import { HandlerContext } from "$fresh/server.ts";

import { Address, beginCell, Cell, CellMessage, CommonMessageInfo, fromNano, InternalMessage, toNano, TonClient } from "https://cdn.skypack.dev/ton?dts";
import { TvmBus, OnChainContract } from "https://esm.sh/ton-tvm-bus@0.0.9";
import axiod from "https://deno.land/x/axiod/mod.ts";

// const client = new TonClient({
//     endpoint: "https://scalable-api.tonwhales.com/jsonRPC",
//     httpAdapter: axiod,
// });

export const handler = async (_req: Request, _ctx: HandlerContext): Promise<Response> => {
    const tvmBus = new TvmBus({ client });

    const myWallet = await OnChainContract.Create(client, Address.parse("EQDjhy1Ig-S0vKCWwd3XZRKODGx0RJyhqW37ZDMl-pgv8iBr"), tvmBus);
    // console.log(myWallet);

    const ammPool = Address.parse("EQBVyErgx7BCboNXOx0CwA9KYuLY4kXMHanURAGvMWeO-VCE");
    const msg = messageGenerator({
        to: ammPool,
        from: myWallet.address,
        body: cellFromString("000000190000000000000001405F5E1006168322CDFD2E"),
        value: toNano("0.19"),
    });
    let messageList = await tvmBus.broadcast(msg);

    return new Response(messageList);
};

export function messageGenerator(opts: { to: Address; from: Address; body: Cell; value: BN; bounce?: boolean }) {
    return new InternalMessage({
        from: opts.from,
        to: opts.to,
        value: opts.value,
        bounce: opts.bounce || false,
        body: new CommonMessageInfo({
            body: new CellMessage(opts.body),
        }),
    });
}

function cellFromString(cellStr: string, stringEncoding = "hex") {
    return beginCell().storeBuffer(Buffer.from(cellStr, stringEncoding)).endCell();
}
